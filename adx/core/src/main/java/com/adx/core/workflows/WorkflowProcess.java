package com.adx.core.workflows;

import com.adx.core.services.ReplicatedPages;
import com.day.cq.mailer.MessageGateway;
import com.day.cq.mailer.MessageGatewayService;
import com.day.cq.workflow.WorkflowException;
import com.day.cq.workflow.WorkflowSession;
import com.day.cq.workflow.exec.WorkItem;
import com.day.cq.workflow.exec.WorkflowData;
import com.day.cq.workflow.metadata.MetaDataMap;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.SimpleEmail;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import java.util.Arrays;

@Component(service = com.day.cq.workflow.exec.WorkflowProcess.class, immediate = true, property = {
        "process.label" + "=Chetan Workflow Process"
})
public class WorkflowProcess implements com.day.cq.workflow.exec.WorkflowProcess {
    private static final Logger LOG = LoggerFactory.getLogger(WorkflowProcess.class);

    @Reference
    ReplicatedPages replicatedPages;

    @Reference
    MessageGatewayService messageGatewayService;


    private String emailTo = "dangerxkills@gmail.com";
    private String emailFrom = "dangerxkills@gmail.com";
    private String emailCC = "";

    @Override
    public void execute(WorkItem workItem, WorkflowSession workflowSession, MetaDataMap metaDataMap) throws WorkflowException {
        try {
            WorkflowData workflowData = workItem.getWorkflowData();
            if (workflowData.getPayloadType().equals("JCR_PATH")) {
                Session session = workflowSession.getSession();

                String path = workflowData.getPayload().toString() + "/jcr:content";
                Node node = (Node) session.getItem(path);
                MetaDataMap wfd = workflowData.getMetaDataMap();

                String[] processArgs = metaDataMap.get("PROCESS_ARGS", "string").split(",");
                LOG.info("processArgs - {}  wfd - {} ", processArgs, Arrays.toString(new MetaDataMap[]{wfd}));

                String[] itemsArray = new String[replicatedPages.getNonReplicatedTitles().size()];
                itemsArray = replicatedPages.getNonReplicatedTitles().toArray(itemsArray);
                node.setProperty("pages", itemsArray);

                try {
                    MessageGateway<Email> messageGateway;
                    Email email = new SimpleEmail();
                    email.addTo(emailTo);
                    if (processArgs.length >= 0) {
                        for (String wfArgs : processArgs) {
                            if (node != null) {
                                wfd.put("email", wfArgs);
                                node.setProperty("email", wfArgs);
                                emailCC = wfArgs;
                                email.addCc(emailCC);
                            }
                        }
                    }

                    email.setSubject("AutoGenerated Email for List of Pages");
                    email.setFrom(emailFrom);
                    email.setMsg("This is the list of non replicated pages: " + Arrays.toString(itemsArray));
                    messageGateway = messageGatewayService.getGateway(Email.class);

                    messageGateway.send(email);
                    LOG.info("\n EMAIL SENT");

                } catch (EmailException | NullPointerException e) {
                    e.printStackTrace();
                    LOG.error("\n error message - {} error - {}", e.getMessage(), e);
                }
            }
        } catch (RepositoryException | NullPointerException e) {
            e.printStackTrace();
            LOG.info("\n Login Exception message: -{}  error: -{} ", e.getMessage(), e);
        }
    }
}
